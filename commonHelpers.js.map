{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import iziToast from \"izitoast\";\n// additional style\nimport \"izitoast/dist/css/iziToast.min.css\";    \n\nimport flatpickr from \"flatpickr\";\n// additional style\nimport \"flatpickr/dist/flatpickr.min.css\";      \n// strict mode\n'use strict'\n\n// define selectors\nconst dataValues = document.querySelectorAll(\".value[data-days], .value[data-hours], .value[data-minutes], .value[data-seconds]\");\n// create array of the timer selectors\nconst valuesArray = Array.from(dataValues); \n// define selectors\nconst startBtn = document.querySelector(\".datetime-button\");\n// page is loaded for the first time -> the Start button is not active\nstartBtn.disabled = true;\n// define selectors\nconst inputElement = document.querySelector(\"#datetime-picker\");\n// page is loaded for the first time -> the Datetime picker is available to select a date\ninputElement.disabled = false;\n\n// init variables\nlet userSelectedDate;\nconst todayDate = Date.now();\n\n// settings for flatpickr\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n    onClose(selectedDates) {\n        // selected date is from the future \n        (selectedDates[0].getTime() >= todayDate) ? (\n            userSelectedDate = selectedDates[0].getTime(),\n            startBtn.disabled = false\n        ) : ( // selected date is from the past -> Error appears, Start button becomes inactive\n                iziToast.error({\n                    title: 'Error',\n                    message: 'Please choose a date in the future'\n                }),\n            startBtn.disabled = true\n        );\n    }\n  };\n\n// create flatpickr instance  \nflatpickr(\"input#datetime-picker\", options);\n\n// creates an object containing timer values\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n// add leading zeroes to timer values \nfunction addLeadingZero(value) { \n    return String(value).padStart(2, '0');\n}\n\n// set event listener on the Start button\nstartBtn.addEventListener(\"click\", () => {\n    // Start button is pressed and becomes inactive\n    startBtn.disabled = true;\n    // after the timer starts, the input field becomes inactive\n    inputElement.disabled = true;\n    // calculate the elapsed time\n    let elapsedTime = userSelectedDate - todayDate;\n    // initial object containing timer values\n    let dateTime = convertMs(elapsedTime);\n    \n    // setInterval() starts the function and repeats it regularly after the specified time interval\n    const intervalId = setInterval(() => {\n        // updating timer fields\n        valuesArray.forEach((element) => {\n            if (dateTime.hasOwnProperty(Object.keys(element.dataset)[0])) {\n                // formatting values before updating timer fields\n                let timerValue = addLeadingZero(dateTime[(Object.keys(element.dataset)[0])]);\n                // updating timer field\n                element.textContent = timerValue;\n            }\n        });\n        // decreasing timer values\n        dateTime = convertMs(elapsedTime - 1000);\n        elapsedTime -= 1000;\n\n        // time is over\n        if (elapsedTime < 0) {\n            clearInterval(intervalId);\n            inputElement.disabled = false;\n        };\n    }, 1000);\n});"],"names":["dataValues","valuesArray","startBtn","inputElement","userSelectedDate","todayDate","options","selectedDates","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value","elapsedTime","dateTime","intervalId","element","timerValue"],"mappings":"+IAWA,MAAMA,EAAa,SAAS,iBAAiB,mFAAmF,EAE1HC,EAAc,MAAM,KAAKD,CAAU,EAEnCE,EAAW,SAAS,cAAc,kBAAkB,EAE1DA,EAAS,SAAW,GAEpB,MAAMC,EAAe,SAAS,cAAc,kBAAkB,EAE9DA,EAAa,SAAW,GAGxB,IAAIC,EACJ,MAAMC,EAAY,KAAK,MAGjBC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACf,QAAQC,EAAe,CAElBA,EAAc,CAAC,EAAE,QAAS,GAAIF,GAC3BD,EAAmBG,EAAc,CAAC,EAAE,QAAS,EAC7CL,EAAS,SAAW,KAEhBM,EAAS,MAAM,CACX,MAAO,QACP,QAAS,oCAC7B,CAAiB,EACLN,EAAS,SAAW,GAE3B,CACL,EAGAO,EAAU,wBAAyBH,CAAO,EAG1C,SAASI,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAGA,SAASC,EAAeC,EAAO,CAC3B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC,CAGAf,EAAS,iBAAiB,QAAS,IAAM,CAErCA,EAAS,SAAW,GAEpBC,EAAa,SAAW,GAExB,IAAIe,EAAcd,EAAmBC,EAEjCc,EAAWT,EAAUQ,CAAW,EAGpC,MAAME,EAAa,YAAY,IAAM,CAEjCnB,EAAY,QAASoB,GAAY,CAC7B,GAAIF,EAAS,eAAe,OAAO,KAAKE,EAAQ,OAAO,EAAE,CAAC,CAAC,EAAG,CAE1D,IAAIC,EAAaN,EAAeG,EAAU,OAAO,KAAKE,EAAQ,OAAO,EAAE,CAAC,CAAC,CAAE,EAE3EA,EAAQ,YAAcC,CACzB,CACb,CAAS,EAEDH,EAAWT,EAAUQ,EAAc,GAAI,EACvCA,GAAe,IAGXA,EAAc,IACd,cAAcE,CAAU,EACxBjB,EAAa,SAAW,GAE/B,EAAE,GAAI,CACX,CAAC"}